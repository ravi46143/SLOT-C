#include <stdio.h>
#include <stdbool.h>


#define NUM_PROCESSES 4
#define NUM_RESOURCES 3
int claim[NUM_PROCESSES][NUM_RESOURCES] = {{3, 2, 2},
                                           {6, 1, 3},
                                           {3, 1, 4},
                                           {4, 2, 2}};
int allocation[NUM_PROCESSES][NUM_RESOURCES] = {{1, 0, 0},
                                                {6, 1, 2},
                                                {2, 1, 1},
                                                {0, 0, 2}};

int available[NUM_RESOURCES] = {9, 3, 6};

int work[NUM_RESOURCES];
bool finish[NUM_PROCESSES];

int main() {
    for (int i = 0; i < NUM_RESOURCES; i++) {
        work[i] = available[i];
    }
    for (int i = 0; i < NUM_PROCESSES; i++) {
        finish[i] = false;
    }

    int num_finished = 0;
    bool safe = true;
    while (num_finished < NUM_PROCESSES && safe) {
        bool found = false;
        for (int i = 0; i < NUM_PROCESSES; i++) {
            if (!finish[i]) {
                bool enough_resources = true;
                for (int j = 0; j < NUM_RESOURCES; j++) {
                    if (claim[i][j] - allocation[i][j] > work[j]) {
                        enough_resources = false;
                        break;
                    }
                }
                if (enough_resources) {
                    found = true;
                    finish[i] = true;
                    num_finished++;
                    for (int j = 0; j < NUM_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    break;
                }
            }
        }
        if (!found) {
            safe = false;
        }
    }

    if (safe) {
        printf("The system is in a safe state.\n");
    } else {
        printf("The system is in an unsafe state.\n");
    }

    return 0;
}
